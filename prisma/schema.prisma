// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // XPシステム
  totalXP   Int      @default(0)
  level     Int      @default(1)
  
  // 統計データ
  totalStudyTime Int  @default(0) // 秒単位
  totalProblems  Int  @default(0)
  totalCorrect   Int  @default(0)

  // 学習データ
  studyStreaks      StudyStreak[]
  studySessions     StudySession[]
  achievements      Achievement[]
  rankings          Ranking[]
  
  // 友達関係
  sentFriendships     Friendship[] @relation("SentFriendships")
  receivedFriendships Friendship[] @relation("ReceivedFriendships")
}

model StudyStreak {
  id        String   @id @default(cuid())
  userId    String
  startDate DateTime
  endDate   DateTime?
  count     Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model StudySession {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime
  duration  Int      // 秒単位
  problems  Int      @default(0)
  correct   Int      @default(0)
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Achievement {
  id          String   @id @default(cuid())
  userId      String
  type        String   // "streak", "study_time", "problems_solved"
  title       String
  description String
  icon        String
  unlockedAt  DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Friendship {
  id        String   @id @default(cuid())
  senderId  String
  receiverId String
  status    String   @default("pending") // "pending", "accepted", "declined"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  sender    User     @relation("SentFriendships", fields: [senderId], references: [id], onDelete: Cascade)
  receiver  User     @relation("ReceivedFriendships", fields: [receiverId], references: [id], onDelete: Cascade)
  
  @@unique([senderId, receiverId])
}

model Ranking {
  id        String   @id @default(cuid())
  userId    String
  type      String   // "weekly", "monthly", "allTime"
  category  String   // "studyTime", "xp", "problems"
  rank      Int
  score     Float
  period    String   // "2024-W29", "2024-07", "all"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, type, category, period])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
}
